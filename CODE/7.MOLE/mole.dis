
mole.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
   0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
   2:	00 00       	nop
   4:	82 c0       	rjmp	.+260    	; 0x10a <__vector_1>
   6:	00 00       	nop
   8:	9c c0       	rjmp	.+312    	; 0x142 <__vector_2>
   a:	00 00       	nop
   c:	b6 c0       	rjmp	.+364    	; 0x17a <__vector_3>
   e:	00 00       	nop
  10:	d0 c0       	rjmp	.+416    	; 0x1b2 <__vector_4>
  12:	00 00       	nop
  14:	66 c0       	rjmp	.+204    	; 0xe2 <__bad_interrupt>
  16:	00 00       	nop
  18:	64 c0       	rjmp	.+200    	; 0xe2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	62 c0       	rjmp	.+196    	; 0xe2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	60 c0       	rjmp	.+192    	; 0xe2 <__bad_interrupt>
  22:	00 00       	nop
  24:	5e c0       	rjmp	.+188    	; 0xe2 <__bad_interrupt>
  26:	00 00       	nop
  28:	5c c0       	rjmp	.+184    	; 0xe2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5a c0       	rjmp	.+180    	; 0xe2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	58 c0       	rjmp	.+176    	; 0xe2 <__bad_interrupt>
  32:	00 00       	nop
  34:	56 c0       	rjmp	.+172    	; 0xe2 <__bad_interrupt>
  36:	00 00       	nop
  38:	54 c0       	rjmp	.+168    	; 0xe2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	52 c0       	rjmp	.+164    	; 0xe2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	50 c0       	rjmp	.+160    	; 0xe2 <__bad_interrupt>
  42:	00 00       	nop
  44:	4e c0       	rjmp	.+156    	; 0xe2 <__bad_interrupt>
  46:	00 00       	nop
  48:	4c c0       	rjmp	.+152    	; 0xe2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4a c0       	rjmp	.+148    	; 0xe2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	48 c0       	rjmp	.+144    	; 0xe2 <__bad_interrupt>
  52:	00 00       	nop
  54:	46 c0       	rjmp	.+140    	; 0xe2 <__bad_interrupt>
  56:	00 00       	nop
  58:	44 c0       	rjmp	.+136    	; 0xe2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	43 c0       	rjmp	.+134    	; 0xe4 <__vector_23>
  5e:	00 00       	nop
  60:	40 c0       	rjmp	.+128    	; 0xe2 <__bad_interrupt>
  62:	00 00       	nop
  64:	3e c0       	rjmp	.+124    	; 0xe2 <__bad_interrupt>
  66:	00 00       	nop
  68:	3c c0       	rjmp	.+120    	; 0xe2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3a c0       	rjmp	.+116    	; 0xe2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	38 c0       	rjmp	.+112    	; 0xe2 <__bad_interrupt>
  72:	00 00       	nop
  74:	36 c0       	rjmp	.+108    	; 0xe2 <__bad_interrupt>
  76:	00 00       	nop
  78:	34 c0       	rjmp	.+104    	; 0xe2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	32 c0       	rjmp	.+100    	; 0xe2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	30 c0       	rjmp	.+96     	; 0xe2 <__bad_interrupt>
  82:	00 00       	nop
  84:	2e c0       	rjmp	.+92     	; 0xe2 <__bad_interrupt>
  86:	00 00       	nop
  88:	2c c0       	rjmp	.+88     	; 0xe2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	2a c0       	rjmp	.+84     	; 0xe2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	28 c0       	rjmp	.+80     	; 0xe2 <__bad_interrupt>
  92:	00 00       	nop
  94:	26 c0       	rjmp	.+76     	; 0xe2 <__bad_interrupt>
  96:	00 00       	nop
  98:	24 c0       	rjmp	.+72     	; 0xe2 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	22 c0       	rjmp	.+68     	; 0xe2 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	20 c0       	rjmp	.+64     	; 0xe2 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	1e c0       	rjmp	.+60     	; 0xe2 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	1c c0       	rjmp	.+56     	; 0xe2 <__bad_interrupt>
	...

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	ee e5       	ldi	r30, 0x5E	; 94
  c0:	f9 e0       	ldi	r31, 0x09	; 9
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	ae 30       	cpi	r26, 0x0E	; 14
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	ae e0       	ldi	r26, 0x0E	; 14
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a6 31       	cpi	r26, 0x16	; 22
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	86 d1       	rcall	.+780    	; 0x3ec <main>
  e0:	3c c4       	rjmp	.+2168   	; 0x95a <_exit>

000000e2 <__bad_interrupt>:
  e2:	8e cf       	rjmp	.-228    	; 0x0 <__vectors>

000000e4 <__vector_23>:
volatile unsigned char sw0,sw1,sw2,sw3;
volatile unsigned char tic_time;

// 8-bit Timer/Counter0 Overflow Interrupt
ISR(TIMER0_OVF_vect)
{
  e4:	1f 92       	push	r1
  e6:	0f 92       	push	r0
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	0f 92       	push	r0
  ec:	11 24       	eor	r1, r1
  ee:	8f 93       	push	r24
    tic_time++;
  f0:	80 91 11 01 	lds	r24, 0x0111
  f4:	8f 5f       	subi	r24, 0xFF	; 255
  f6:	80 93 11 01 	sts	0x0111, r24

    TCNT0 = 256 - (CPU_CLOCK / TICKS_PER_SEC / 64);
  fa:	86 e0       	ldi	r24, 0x06	; 6
  fc:	86 bd       	out	0x26, r24	; 38
}
  fe:	8f 91       	pop	r24
 100:	0f 90       	pop	r0
 102:	0f be       	out	0x3f, r0	; 63
 104:	0f 90       	pop	r0
 106:	1f 90       	pop	r1
 108:	18 95       	reti

0000010a <__vector_1>:

// INT0 : External Interrupt
ISR(INT0_vect)
{
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	8f 93       	push	r24
  if (!start)
 116:	80 91 12 01 	lds	r24, 0x0112
 11a:	81 11       	cpse	r24, r1
 11c:	03 c0       	rjmp	.+6      	; 0x124 <__vector_1+0x1a>
    start = 1;
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	80 93 12 01 	sts	0x0112, r24

  if (sw0)
 124:	80 91 15 01 	lds	r24, 0x0115
 128:	88 23       	and	r24, r24
 12a:	29 f0       	breq	.+10     	; 0x136 <__vector_1+0x2c>
    cnt++;
 12c:	80 91 0f 01 	lds	r24, 0x010F
 130:	8f 5f       	subi	r24, 0xFF	; 255
 132:	80 93 0f 01 	sts	0x010F, r24
}
 136:	8f 91       	pop	r24
 138:	0f 90       	pop	r0
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	0f 90       	pop	r0
 13e:	1f 90       	pop	r1
 140:	18 95       	reti

00000142 <__vector_2>:

// INT1 : External Interrupt
ISR(INT1_vect)
{
 142:	1f 92       	push	r1
 144:	0f 92       	push	r0
 146:	0f b6       	in	r0, 0x3f	; 63
 148:	0f 92       	push	r0
 14a:	11 24       	eor	r1, r1
 14c:	8f 93       	push	r24
  if (!start)
 14e:	80 91 12 01 	lds	r24, 0x0112
 152:	81 11       	cpse	r24, r1
 154:	03 c0       	rjmp	.+6      	; 0x15c <__vector_2+0x1a>
    start = 1;
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	80 93 12 01 	sts	0x0112, r24

  if (sw1)
 15c:	80 91 13 01 	lds	r24, 0x0113
 160:	88 23       	and	r24, r24
 162:	29 f0       	breq	.+10     	; 0x16e <__vector_2+0x2c>
    cnt++;
 164:	80 91 0f 01 	lds	r24, 0x010F
 168:	8f 5f       	subi	r24, 0xFF	; 255
 16a:	80 93 0f 01 	sts	0x010F, r24
}
 16e:	8f 91       	pop	r24
 170:	0f 90       	pop	r0
 172:	0f be       	out	0x3f, r0	; 63
 174:	0f 90       	pop	r0
 176:	1f 90       	pop	r1
 178:	18 95       	reti

0000017a <__vector_3>:

// INT2 : External Interrupt
ISR(INT2_vect)
{
 17a:	1f 92       	push	r1
 17c:	0f 92       	push	r0
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	0f 92       	push	r0
 182:	11 24       	eor	r1, r1
 184:	8f 93       	push	r24
  if (!start)
 186:	80 91 12 01 	lds	r24, 0x0112
 18a:	81 11       	cpse	r24, r1
 18c:	03 c0       	rjmp	.+6      	; 0x194 <__vector_3+0x1a>
    start = 1;
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	80 93 12 01 	sts	0x0112, r24

  if (sw2)
 194:	80 91 14 01 	lds	r24, 0x0114
 198:	88 23       	and	r24, r24
 19a:	29 f0       	breq	.+10     	; 0x1a6 <__vector_3+0x2c>
    cnt++;
 19c:	80 91 0f 01 	lds	r24, 0x010F
 1a0:	8f 5f       	subi	r24, 0xFF	; 255
 1a2:	80 93 0f 01 	sts	0x010F, r24
}
 1a6:	8f 91       	pop	r24
 1a8:	0f 90       	pop	r0
 1aa:	0f be       	out	0x3f, r0	; 63
 1ac:	0f 90       	pop	r0
 1ae:	1f 90       	pop	r1
 1b0:	18 95       	reti

000001b2 <__vector_4>:

// INT3 : External Interrupt
ISR(INT3_vect)
{
 1b2:	1f 92       	push	r1
 1b4:	0f 92       	push	r0
 1b6:	0f b6       	in	r0, 0x3f	; 63
 1b8:	0f 92       	push	r0
 1ba:	11 24       	eor	r1, r1
 1bc:	8f 93       	push	r24
  if (!start)
 1be:	80 91 12 01 	lds	r24, 0x0112
 1c2:	81 11       	cpse	r24, r1
 1c4:	03 c0       	rjmp	.+6      	; 0x1cc <__vector_4+0x1a>
    start = 1;
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	80 93 12 01 	sts	0x0112, r24

  if (sw3)
 1cc:	80 91 10 01 	lds	r24, 0x0110
 1d0:	88 23       	and	r24, r24
 1d2:	29 f0       	breq	.+10     	; 0x1de <__vector_4+0x2c>
    cnt++;
 1d4:	80 91 0f 01 	lds	r24, 0x010F
 1d8:	8f 5f       	subi	r24, 0xFF	; 255
 1da:	80 93 0f 01 	sts	0x010F, r24
}
 1de:	8f 91       	pop	r24
 1e0:	0f 90       	pop	r0
 1e2:	0f be       	out	0x3f, r0	; 63
 1e4:	0f 90       	pop	r0
 1e6:	1f 90       	pop	r1
 1e8:	18 95       	reti

000001ea <check_led_on>:

// Check LED on
void check_led_on(unsigned int msec, unsigned char state)
{
  switch (state)
 1ea:	65 30       	cpi	r22, 0x05	; 5
 1ec:	79 f0       	breq	.+30     	; 0x20c <check_led_on+0x22>
 1ee:	30 f4       	brcc	.+12     	; 0x1fc <check_led_on+0x12>
 1f0:	64 30       	cpi	r22, 0x04	; 4
 1f2:	99 f4       	brne	.+38     	; 0x21a <check_led_on+0x30>
  {
    case LED0: sw0 = 1; break;
 1f4:	21 e0       	ldi	r18, 0x01	; 1
 1f6:	20 93 15 01 	sts	0x0115, r18
 1fa:	0f c0       	rjmp	.+30     	; 0x21a <check_led_on+0x30>
}

// Check LED on
void check_led_on(unsigned int msec, unsigned char state)
{
  switch (state)
 1fc:	66 30       	cpi	r22, 0x06	; 6
 1fe:	51 f0       	breq	.+20     	; 0x214 <check_led_on+0x2a>
 200:	67 30       	cpi	r22, 0x07	; 7
 202:	59 f4       	brne	.+22     	; 0x21a <check_led_on+0x30>
  {
    case LED0: sw0 = 1; break;
    case LED1: sw1 = 1; break;
    case LED2: sw2 = 1; break;
    case LED3: sw3 = 1; break;
 204:	21 e0       	ldi	r18, 0x01	; 1
 206:	20 93 10 01 	sts	0x0110, r18
 20a:	07 c0       	rjmp	.+14     	; 0x21a <check_led_on+0x30>
void check_led_on(unsigned int msec, unsigned char state)
{
  switch (state)
  {
    case LED0: sw0 = 1; break;
    case LED1: sw1 = 1; break;
 20c:	21 e0       	ldi	r18, 0x01	; 1
 20e:	20 93 13 01 	sts	0x0113, r18
 212:	03 c0       	rjmp	.+6      	; 0x21a <check_led_on+0x30>
    case LED2: sw2 = 1; break;
 214:	21 e0       	ldi	r18, 0x01	; 1
 216:	20 93 14 01 	sts	0x0114, r18
    case LED3: sw3 = 1; break;
  }

  tic_time = 0;
 21a:	10 92 11 01 	sts	0x0111, r1
  while (msec > tic_time);
 21e:	20 91 11 01 	lds	r18, 0x0111
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	28 17       	cp	r18, r24
 226:	39 07       	cpc	r19, r25
 228:	d0 f3       	brcs	.-12     	; 0x21e <check_led_on+0x34>

  sw0 = 0;
 22a:	10 92 15 01 	sts	0x0115, r1
  sw1 = 0;
 22e:	10 92 13 01 	sts	0x0113, r1
  sw2 = 0;
 232:	10 92 14 01 	sts	0x0114, r1
  sw3 = 0;
 236:	10 92 10 01 	sts	0x0110, r1
 23a:	08 95       	ret

0000023c <delay_ms>:
}

void delay_ms(unsigned int msec)
{
  tic_time = 0;
 23c:	10 92 11 01 	sts	0x0111, r1
  while (msec > tic_time);
 240:	20 91 11 01 	lds	r18, 0x0111
 244:	30 e0       	ldi	r19, 0x00	; 0
 246:	28 17       	cp	r18, r24
 248:	39 07       	cpc	r19, r25
 24a:	d0 f3       	brcs	.-12     	; 0x240 <delay_ms+0x4>
}
 24c:	08 95       	ret

0000024e <get_adc_data>:
unsigned int get_adc_data(unsigned char port)
{
    unsigned int adc;

    // Select ADC port
    ADMUX = port|(1<<REFS0);
 24e:	98 2f       	mov	r25, r24
 250:	90 64       	ori	r25, 0x40	; 64
 252:	90 93 7c 00 	sts	0x007C, r25

    // Start ADC Conversion
    ADCSRA |= (1<<ADSC);
 256:	90 91 7a 00 	lds	r25, 0x007A
 25a:	90 64       	ori	r25, 0x40	; 64
 25c:	90 93 7a 00 	sts	0x007A, r25

    // Wait until ADC conversion completed
    while (!(ADCSRA & (1<<ADIF)));
 260:	90 91 7a 00 	lds	r25, 0x007A
 264:	94 ff       	sbrs	r25, 4
 266:	fc cf       	rjmp	.-8      	; 0x260 <get_adc_data+0x12>

    adc = (int)ADCL+((int)ADCH<<8);
 268:	90 91 78 00 	lds	r25, 0x0078
 26c:	60 91 79 00 	lds	r22, 0x0079
 270:	70 e0       	ldi	r23, 0x00	; 0
 272:	76 2f       	mov	r23, r22
 274:	66 27       	eor	r22, r22
 276:	69 0f       	add	r22, r25
 278:	71 1d       	adc	r23, r1

    // Use VR to change LED speed
    if (!port)
 27a:	81 11       	cpse	r24, r1
 27c:	23 c0       	rjmp	.+70     	; 0x2c4 <get_adc_data+0x76>
    {
      adc = (int)(adc/1023.0*3);
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	c8 d1       	rcall	.+912    	; 0x614 <__floatunsisf>
 284:	20 e0       	ldi	r18, 0x00	; 0
 286:	30 ec       	ldi	r19, 0xC0	; 192
 288:	4f e7       	ldi	r20, 0x7F	; 127
 28a:	54 e4       	ldi	r21, 0x44	; 68
 28c:	2a d1       	rcall	.+596    	; 0x4e2 <__divsf3>
 28e:	20 e0       	ldi	r18, 0x00	; 0
 290:	30 e0       	ldi	r19, 0x00	; 0
 292:	40 e4       	ldi	r20, 0x40	; 64
 294:	50 e4       	ldi	r21, 0x40	; 64
 296:	4c d2       	rcall	.+1176   	; 0x730 <__mulsf3>
 298:	8c d1       	rcall	.+792    	; 0x5b2 <__fixsfsi>
 29a:	61 30       	cpi	r22, 0x01	; 1
 29c:	71 05       	cpc	r23, r1
 29e:	51 f0       	breq	.+20     	; 0x2b4 <get_adc_data+0x66>
 2a0:	78 f0       	brcs	.+30     	; 0x2c0 <get_adc_data+0x72>
      switch (adc)
 2a2:	62 30       	cpi	r22, 0x02	; 2
 2a4:	71 05       	cpc	r23, r1
 2a6:	49 f0       	breq	.+18     	; 0x2ba <get_adc_data+0x6c>
 2a8:	63 30       	cpi	r22, 0x03	; 3
 2aa:	71 05       	cpc	r23, r1
 2ac:	59 f4       	brne	.+22     	; 0x2c4 <get_adc_data+0x76>
 2ae:	6a ef       	ldi	r22, 0xFA	; 250
 2b0:	70 e0       	ldi	r23, 0x00	; 0
 2b2:	08 c0       	rjmp	.+16     	; 0x2c4 <get_adc_data+0x76>
 2b4:	66 e9       	ldi	r22, 0x96	; 150
      {
        case 0: adc = 100; break;
        case 1: adc = 150; break;
        case 2: adc = 200; break;
        case 3: adc = 250; break;
 2b6:	70 e0       	ldi	r23, 0x00	; 0
 2b8:	05 c0       	rjmp	.+10     	; 0x2c4 <get_adc_data+0x76>
 2ba:	68 ec       	ldi	r22, 0xC8	; 200
    {
      adc = (int)(adc/1023.0*3);
      switch (adc)
      {
        case 0: adc = 100; break;
        case 1: adc = 150; break;
 2bc:	70 e0       	ldi	r23, 0x00	; 0
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <get_adc_data+0x76>
 2c0:	64 e6       	ldi	r22, 0x64	; 100
        case 2: adc = 200; break;
 2c2:	70 e0       	ldi	r23, 0x00	; 0
 2c4:	cb 01       	movw	r24, r22
 2c6:	08 95       	ret

000002c8 <display_led_randomly>:
    return adc;
}

// Display LED
void display_led_randomly(unsigned int msec)
{
 2c8:	0f 93       	push	r16
 2ca:	1f 93       	push	r17
 2cc:	cf 93       	push	r28
 2ce:	8c 01       	movw	r16, r24
  unsigned char random,led;

  // Return random number in 4,5,6,7
  random = rand()%4+4;
 2d0:	d9 d2       	rcall	.+1458   	; 0x884 <rand>
 2d2:	64 e0       	ldi	r22, 0x04	; 4
 2d4:	70 e0       	ldi	r23, 0x00	; 0
 2d6:	c2 d0       	rcall	.+388    	; 0x45c <__divmodhi4>
 2d8:	64 e0       	ldi	r22, 0x04	; 4
 2da:	68 0f       	add	r22, r24
 2dc:	65 30       	cpi	r22, 0x05	; 5
 2de:	59 f0       	breq	.+22     	; 0x2f6 <display_led_randomly+0x2e>

  // Display LED randomly
  switch (random)
 2e0:	20 f4       	brcc	.+8      	; 0x2ea <display_led_randomly+0x22>
 2e2:	64 30       	cpi	r22, 0x04	; 4
 2e4:	59 f4       	brne	.+22     	; 0x2fc <display_led_randomly+0x34>
 2e6:	c0 e1       	ldi	r28, 0x10	; 16
 2e8:	09 c0       	rjmp	.+18     	; 0x2fc <display_led_randomly+0x34>
  {
    case LED0 : led = 0x10; break;
 2ea:	66 30       	cpi	r22, 0x06	; 6
 2ec:	31 f0       	breq	.+12     	; 0x2fa <display_led_randomly+0x32>

  // Return random number in 4,5,6,7
  random = rand()%4+4;

  // Display LED randomly
  switch (random)
 2ee:	67 30       	cpi	r22, 0x07	; 7
 2f0:	29 f4       	brne	.+10     	; 0x2fc <display_led_randomly+0x34>
 2f2:	c0 e8       	ldi	r28, 0x80	; 128
 2f4:	03 c0       	rjmp	.+6      	; 0x2fc <display_led_randomly+0x34>
  {
    case LED0 : led = 0x10; break;
    case LED1 : led = 0x20; break;
    case LED2 : led = 0x40; break;
    case LED3 : led = 0x80; break;
 2f6:	c0 e2       	ldi	r28, 0x20	; 32
 2f8:	01 c0       	rjmp	.+2      	; 0x2fc <display_led_randomly+0x34>

  // Display LED randomly
  switch (random)
  {
    case LED0 : led = 0x10; break;
    case LED1 : led = 0x20; break;
 2fa:	c0 e4       	ldi	r28, 0x40	; 64
 2fc:	c0 95       	com	r28
    case LED2 : led = 0x40; break;
 2fe:	c5 b9       	out	0x05, r28	; 5
    case LED3 : led = 0x80; break;
  }

  PORT_LED = ~led;
 300:	c8 01       	movw	r24, r16
 302:	73 df       	rcall	.-282    	; 0x1ea <check_led_on>
  check_led_on(msec,random);
 304:	8f ef       	ldi	r24, 0xFF	; 255
 306:	85 b9       	out	0x05, r24	; 5
 308:	c8 01       	movw	r24, r16

  PORT_LED = 0xFF;
 30a:	96 95       	lsr	r25
 30c:	87 95       	ror	r24
  delay_ms(msec/2);
 30e:	96 df       	rcall	.-212    	; 0x23c <delay_ms>
 310:	cf 91       	pop	r28
 312:	1f 91       	pop	r17
 314:	0f 91       	pop	r16
 316:	08 95       	ret

00000318 <game_clear>:
}

// Game Clear Performance
void game_clear(void)
{
  cli();
 318:	f8 94       	cli
 31a:	83 e0       	ldi	r24, 0x03	; 3
 31c:	90 e0       	ldi	r25, 0x00	; 0

  for (i=0; i<3; i++)
  {
    PORT_LED = 0x00;
    _delay_ms(300);
    PORT_LED = 0xFF;
 31e:	2f ef       	ldi	r18, 0xFF	; 255
  int i;
  unsigned char game_clear_led;

  for (i=0; i<3; i++)
  {
    PORT_LED = 0x00;
 320:	15 b8       	out	0x05, r1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 322:	3f ef       	ldi	r19, 0xFF	; 255
 324:	45 ea       	ldi	r20, 0xA5	; 165
 326:	5e e0       	ldi	r21, 0x0E	; 14
 328:	31 50       	subi	r19, 0x01	; 1
 32a:	40 40       	sbci	r20, 0x00	; 0
 32c:	50 40       	sbci	r21, 0x00	; 0
 32e:	e1 f7       	brne	.-8      	; 0x328 <game_clear+0x10>
 330:	00 c0       	rjmp	.+0      	; 0x332 <game_clear+0x1a>
 332:	00 00       	nop
    _delay_ms(300);
    PORT_LED = 0xFF;
 334:	25 b9       	out	0x05, r18	; 5
 336:	3f ef       	ldi	r19, 0xFF	; 255
 338:	45 ea       	ldi	r20, 0xA5	; 165
 33a:	5e e0       	ldi	r21, 0x0E	; 14
 33c:	31 50       	subi	r19, 0x01	; 1
 33e:	40 40       	sbci	r20, 0x00	; 0
 340:	50 40       	sbci	r21, 0x00	; 0
 342:	e1 f7       	brne	.-8      	; 0x33c <game_clear+0x24>
 344:	00 c0       	rjmp	.+0      	; 0x346 <game_clear+0x2e>
 346:	00 00       	nop
 348:	01 97       	sbiw	r24, 0x01	; 1
  cli();

  int i;
  unsigned char game_clear_led;

  for (i=0; i<3; i++)
 34a:	51 f7       	brne	.-44     	; 0x320 <game_clear+0x8>
    _delay_ms(300);
    PORT_LED = 0xFF;
    _delay_ms(300);
  }

  PORT_LED = 0xFF;
 34c:	8f ef       	ldi	r24, 0xFF	; 255
 34e:	85 b9       	out	0x05, r24	; 5
 350:	24 e0       	ldi	r18, 0x04	; 4
 352:	30 e0       	ldi	r19, 0x00	; 0
  game_clear_led = ~(0x08);
 354:	87 ef       	ldi	r24, 0xF7	; 247
  for (i=0; i<4; i++)
  {
    game_clear_led = game_clear_led << 1;
 356:	88 0f       	add	r24, r24
    PORT_LED = game_clear_led;
 358:	85 b9       	out	0x05, r24	; 5
 35a:	9f ef       	ldi	r25, 0xFF	; 255
 35c:	45 ea       	ldi	r20, 0xA5	; 165
 35e:	5e e0       	ldi	r21, 0x0E	; 14
 360:	91 50       	subi	r25, 0x01	; 1
 362:	40 40       	sbci	r20, 0x00	; 0
 364:	50 40       	sbci	r21, 0x00	; 0
 366:	e1 f7       	brne	.-8      	; 0x360 <game_clear+0x48>
 368:	00 c0       	rjmp	.+0      	; 0x36a <game_clear+0x52>
 36a:	00 00       	nop
 36c:	21 50       	subi	r18, 0x01	; 1
 36e:	31 09       	sbc	r19, r1
    _delay_ms(300);
  }

  PORT_LED = 0xFF;
  game_clear_led = ~(0x08);
  for (i=0; i<4; i++)
 370:	91 f7       	brne	.-28     	; 0x356 <game_clear+0x3e>
 372:	24 e0       	ldi	r18, 0x04	; 4
 374:	30 e0       	ldi	r19, 0x00	; 0
    PORT_LED = game_clear_led;
    _delay_ms(300);
  }
  for (i=0; i<4; i++)
  {
    PORT_LED = game_clear_led;
 376:	85 b9       	out	0x05, r24	; 5
    game_clear_led = game_clear_led >> 1;
 378:	86 95       	lsr	r24
    game_clear_led |= 0x80;
 37a:	80 68       	ori	r24, 0x80	; 128
 37c:	9f ef       	ldi	r25, 0xFF	; 255
 37e:	45 ea       	ldi	r20, 0xA5	; 165
 380:	5e e0       	ldi	r21, 0x0E	; 14
 382:	91 50       	subi	r25, 0x01	; 1
 384:	40 40       	sbci	r20, 0x00	; 0
 386:	50 40       	sbci	r21, 0x00	; 0
 388:	e1 f7       	brne	.-8      	; 0x382 <game_clear+0x6a>
 38a:	00 c0       	rjmp	.+0      	; 0x38c <game_clear+0x74>
 38c:	00 00       	nop
 38e:	21 50       	subi	r18, 0x01	; 1
 390:	31 09       	sbc	r19, r1
  {
    game_clear_led = game_clear_led << 1;
    PORT_LED = game_clear_led;
    _delay_ms(300);
  }
  for (i=0; i<4; i++)
 392:	89 f7       	brne	.-30     	; 0x376 <game_clear+0x5e>
    game_clear_led = game_clear_led >> 1;
    game_clear_led |= 0x80;
    _delay_ms(300);
  }

  sei();
 394:	78 94       	sei
  // Reset game
  cnt = 0;
 396:	10 92 0f 01 	sts	0x010F, r1
  start = 0;
 39a:	10 92 12 01 	sts	0x0112, r1
  rand_start = 0;
 39e:	10 92 0e 01 	sts	0x010E, r1
 3a2:	08 95       	ret

000003a4 <init_gpio>:
}

// GPIO Init
void init_gpio(void)
{
  DDR_FND |= (1<<PORT4)|(1<<PORT5)|(1<<PORT6)|(1<<PORT7);
 3a4:	80 b3       	in	r24, 0x10	; 16
 3a6:	80 6f       	ori	r24, 0xF0	; 240
 3a8:	80 bb       	out	0x10, r24	; 16
  DDR_LED |= (1<<PORT4)|(1<<PORT5)|(1<<PORT6)|(1<<PORT7);
 3aa:	84 b1       	in	r24, 0x04	; 4
 3ac:	80 6f       	ori	r24, 0xF0	; 240
 3ae:	84 b9       	out	0x04, r24	; 4
 3b0:	08 95       	ret

000003b2 <init_adc>:

// ADC Init
void init_adc(void)
{
  // AVCC with external capacitor on AREF pin
  ADMUX |= (0<<REFS1)|(1<<REFS0);
 3b2:	ec e7       	ldi	r30, 0x7C	; 124
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
 3b6:	80 81       	ld	r24, Z
 3b8:	80 64       	ori	r24, 0x40	; 64
 3ba:	80 83       	st	Z, r24
  // PF0 : VR, PF1 : CDS
  ADMUX |= (0<<MUX4)|(0<<MUX3)|(0<<MUX2)|(0<<MUX1)|(1<<MUX0);
 3bc:	80 81       	ld	r24, Z
 3be:	81 60       	ori	r24, 0x01	; 1
 3c0:	80 83       	st	Z, r24
  // Enable ADC, Division factor = 128 (= 125kHz) : 50kHz < 125kHz < 200kHz
  ADCSRA |= (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 3c2:	ea e7       	ldi	r30, 0x7A	; 122
 3c4:	f0 e0       	ldi	r31, 0x00	; 0
 3c6:	80 81       	ld	r24, Z
 3c8:	87 68       	ori	r24, 0x87	; 135
 3ca:	80 83       	st	Z, r24
 3cc:	08 95       	ret

000003ce <init_trigger>:
}

void init_trigger(void)
{
  // Falling edge
  EICRA = (1<<ISC01)|(0<<ISC00)|(1<<ISC11)|(0<<ISC10)|(1<<ISC21)|(0<<ISC20)|(1<<ISC31)|(0<<ISC30);
 3ce:	8a ea       	ldi	r24, 0xAA	; 170
 3d0:	80 93 69 00 	sts	0x0069, r24
  EIMSK = (1<<INT0)|(1<<INT1)|(1<<INT2)|(1<<INT3);
 3d4:	8f e0       	ldi	r24, 0x0F	; 15
 3d6:	8d bb       	out	0x1d, r24	; 29
 3d8:	08 95       	ret

000003da <init_timer>:

// Timer/Counter Init
void init_timer()
{
  // Waveform Generation Mode : Normal mode, Clock : clk/64 (prescaler)
  TCCR0B = (0<<WGM02)|(0<<CS02)|(1<<CS01)|(1<<CS00);
 3da:	83 e0       	ldi	r24, 0x03	; 3
 3dc:	85 bd       	out	0x25, r24	; 37
  TCCR0A = (0<<WGM01)|(0<<WGM00);
 3de:	14 bc       	out	0x24, r1	; 36
  TCNT0 = 256 - (CPU_CLOCK / TICKS_PER_SEC / 64);
 3e0:	86 e0       	ldi	r24, 0x06	; 6
 3e2:	86 bd       	out	0x26, r24	; 38
  // Timer/Counter0 Overflow Interrupt : Enable
  TIMSK0 = (0<<OCIE0B)|(0<<OCIE0A)|(1<<TOIE0);
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	80 93 6e 00 	sts	0x006E, r24
 3ea:	08 95       	ret

000003ec <main>:
}

int main(void)
{
 3ec:	aa e0       	ldi	r26, 0x0A	; 10
 3ee:	b0 e0       	ldi	r27, 0x00	; 0
 3f0:	eb ef       	ldi	r30, 0xFB	; 251
 3f2:	f1 e0       	ldi	r31, 0x01	; 1
 3f4:	56 c0       	rjmp	.+172    	; 0x4a2 <__prologue_saves__+0x20>
 3f6:	8a e0       	ldi	r24, 0x0A	; 10
  unsigned char fnd_num[10] = {0x0F,0x1F,0x2F,0x3F,0x4F,0x5F,0x6F,0x7F,0x8F,0x9F};
 3f8:	e4 e0       	ldi	r30, 0x04	; 4
 3fa:	f1 e0       	ldi	r31, 0x01	; 1
 3fc:	de 01       	movw	r26, r28
 3fe:	11 96       	adiw	r26, 0x01	; 1
 400:	01 90       	ld	r0, Z+
 402:	0d 92       	st	X+, r0
 404:	8a 95       	dec	r24
 406:	e1 f7       	brne	.-8      	; 0x400 <main+0x14>
 408:	cd df       	rcall	.-102    	; 0x3a4 <init_gpio>

  // ---- GPIO ----
  init_gpio();
 40a:	e7 df       	rcall	.-50     	; 0x3da <init_timer>
 40c:	e0 df       	rcall	.-64     	; 0x3ce <init_trigger>

  // ---- Timer/Counter0 ----
  init_timer();
 40e:	d1 df       	rcall	.-94     	; 0x3b2 <init_adc>
 410:	78 94       	sei

  // ---- External Interrupt ----
  init_trigger();
 412:	8f ef       	ldi	r24, 0xFF	; 255
 414:	85 b9       	out	0x05, r24	; 5

  // ---- Analog to Digital Converter ----
  init_adc();
 416:	89 81       	ldd	r24, Y+1	; 0x01
 418:	81 bb       	out	0x11, r24	; 17

  // ---- Global Interrupt : Enable ----
  sei();
 41a:	80 91 12 01 	lds	r24, 0x0112

  // Turn off FND & all LED
  PORT_LED = 0xFF;
 41e:	88 23       	and	r24, r24
  PORT_FND = fnd_num[0];
 420:	e1 f3       	breq	.-8      	; 0x41a <main+0x2e>
 422:	80 91 0e 01 	lds	r24, 0x010E

  for (;;)
  {
    if (start)
 426:	81 11       	cpse	r24, r1
 428:	06 c0       	rjmp	.+12     	; 0x436 <main+0x4a>
 42a:	81 e0       	ldi	r24, 0x01	; 1
    {
      // Set for random without duplication
      if (!rand_start)
 42c:	10 df       	rcall	.-480    	; 0x24e <get_adc_data>
 42e:	2d d2       	rcall	.+1114   	; 0x88a <srand>
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	80 93 0e 01 	sts	0x010E, r24
      {
        srand(get_adc_data(ADC_CDS));
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	0a df       	rcall	.-492    	; 0x24e <get_adc_data>
 43a:	46 df       	rcall	.-372    	; 0x2c8 <display_led_randomly>
 43c:	80 91 0f 01 	lds	r24, 0x010F
        rand_start = 1;
 440:	e1 e0       	ldi	r30, 0x01	; 1
 442:	f0 e0       	ldi	r31, 0x00	; 0
      }

      // Get LED speed from VR
      display_led_randomly(get_adc_data(ADC_VR));
 444:	ec 0f       	add	r30, r28
 446:	fd 1f       	adc	r31, r29
 448:	e8 0f       	add	r30, r24
 44a:	f1 1d       	adc	r31, r1
 44c:	80 81       	ld	r24, Z
      PORT_FND = fnd_num[cnt];
 44e:	81 bb       	out	0x11, r24	; 17
 450:	80 91 0f 01 	lds	r24, 0x010F
 454:	89 30       	cpi	r24, 0x09	; 9
 456:	09 f7       	brne	.-62     	; 0x41a <main+0x2e>
 458:	5f df       	rcall	.-322    	; 0x318 <game_clear>
 45a:	df cf       	rjmp	.-66     	; 0x41a <main+0x2e>

0000045c <__divmodhi4>:
 45c:	97 fb       	bst	r25, 7
 45e:	07 2e       	mov	r0, r23
 460:	16 f4       	brtc	.+4      	; 0x466 <__divmodhi4+0xa>

      if (cnt == 9)
 462:	00 94       	com	r0
 464:	06 d0       	rcall	.+12     	; 0x472 <__divmodhi4_neg1>
 466:	77 fd       	sbrc	r23, 7
 468:	08 d0       	rcall	.+16     	; 0x47a <__divmodhi4_neg2>
        game_clear();
 46a:	27 d0       	rcall	.+78     	; 0x4ba <__udivmodhi4>
 46c:	07 fc       	sbrc	r0, 7
 46e:	05 d0       	rcall	.+10     	; 0x47a <__divmodhi4_neg2>
 470:	3e f4       	brtc	.+14     	; 0x480 <__divmodhi4_exit>

00000472 <__divmodhi4_neg1>:
 472:	90 95       	com	r25
 474:	81 95       	neg	r24
 476:	9f 4f       	sbci	r25, 0xFF	; 255
 478:	08 95       	ret

0000047a <__divmodhi4_neg2>:
 47a:	70 95       	com	r23
 47c:	61 95       	neg	r22
 47e:	7f 4f       	sbci	r23, 0xFF	; 255

00000480 <__divmodhi4_exit>:
 480:	08 95       	ret

00000482 <__prologue_saves__>:
 482:	2f 92       	push	r2
 484:	3f 92       	push	r3
 486:	4f 92       	push	r4
 488:	5f 92       	push	r5
 48a:	6f 92       	push	r6
 48c:	7f 92       	push	r7
 48e:	8f 92       	push	r8
 490:	9f 92       	push	r9
 492:	af 92       	push	r10
 494:	bf 92       	push	r11
 496:	cf 92       	push	r12
 498:	df 92       	push	r13
 49a:	ef 92       	push	r14
 49c:	ff 92       	push	r15
 49e:	0f 93       	push	r16
 4a0:	1f 93       	push	r17
 4a2:	cf 93       	push	r28
 4a4:	df 93       	push	r29
 4a6:	cd b7       	in	r28, 0x3d	; 61
 4a8:	de b7       	in	r29, 0x3e	; 62
 4aa:	ca 1b       	sub	r28, r26
 4ac:	db 0b       	sbc	r29, r27
 4ae:	0f b6       	in	r0, 0x3f	; 63
 4b0:	f8 94       	cli
 4b2:	de bf       	out	0x3e, r29	; 62
 4b4:	0f be       	out	0x3f, r0	; 63
 4b6:	cd bf       	out	0x3d, r28	; 61
 4b8:	09 94       	ijmp

000004ba <__udivmodhi4>:
 4ba:	aa 1b       	sub	r26, r26
 4bc:	bb 1b       	sub	r27, r27
 4be:	51 e1       	ldi	r21, 0x11	; 17
 4c0:	07 c0       	rjmp	.+14     	; 0x4d0 <__udivmodhi4_ep>

000004c2 <__udivmodhi4_loop>:
 4c2:	aa 1f       	adc	r26, r26
 4c4:	bb 1f       	adc	r27, r27
 4c6:	a6 17       	cp	r26, r22
 4c8:	b7 07       	cpc	r27, r23
 4ca:	10 f0       	brcs	.+4      	; 0x4d0 <__udivmodhi4_ep>
 4cc:	a6 1b       	sub	r26, r22
 4ce:	b7 0b       	sbc	r27, r23

000004d0 <__udivmodhi4_ep>:
 4d0:	88 1f       	adc	r24, r24
 4d2:	99 1f       	adc	r25, r25
 4d4:	5a 95       	dec	r21
 4d6:	a9 f7       	brne	.-22     	; 0x4c2 <__udivmodhi4_loop>
 4d8:	80 95       	com	r24
 4da:	90 95       	com	r25
 4dc:	bc 01       	movw	r22, r24
 4de:	cd 01       	movw	r24, r26
 4e0:	08 95       	ret

000004e2 <__divsf3>:
 4e2:	0c d0       	rcall	.+24     	; 0x4fc <__divsf3x>
 4e4:	eb c0       	rjmp	.+470    	; 0x6bc <__fp_round>
 4e6:	e3 d0       	rcall	.+454    	; 0x6ae <__fp_pscB>
 4e8:	40 f0       	brcs	.+16     	; 0x4fa <__divsf3+0x18>
 4ea:	da d0       	rcall	.+436    	; 0x6a0 <__fp_pscA>
 4ec:	30 f0       	brcs	.+12     	; 0x4fa <__divsf3+0x18>
 4ee:	21 f4       	brne	.+8      	; 0x4f8 <__divsf3+0x16>
 4f0:	5f 3f       	cpi	r21, 0xFF	; 255
 4f2:	19 f0       	breq	.+6      	; 0x4fa <__divsf3+0x18>
 4f4:	cc c0       	rjmp	.+408    	; 0x68e <__fp_inf>
 4f6:	51 11       	cpse	r21, r1
 4f8:	15 c1       	rjmp	.+554    	; 0x724 <__fp_szero>
 4fa:	cf c0       	rjmp	.+414    	; 0x69a <__fp_nan>

000004fc <__divsf3x>:
 4fc:	f0 d0       	rcall	.+480    	; 0x6de <__fp_split3>
 4fe:	98 f3       	brcs	.-26     	; 0x4e6 <__divsf3+0x4>

00000500 <__divsf3_pse>:
 500:	99 23       	and	r25, r25
 502:	c9 f3       	breq	.-14     	; 0x4f6 <__divsf3+0x14>
 504:	55 23       	and	r21, r21
 506:	b1 f3       	breq	.-20     	; 0x4f4 <__divsf3+0x12>
 508:	95 1b       	sub	r25, r21
 50a:	55 0b       	sbc	r21, r21
 50c:	bb 27       	eor	r27, r27
 50e:	aa 27       	eor	r26, r26
 510:	62 17       	cp	r22, r18
 512:	73 07       	cpc	r23, r19
 514:	84 07       	cpc	r24, r20
 516:	38 f0       	brcs	.+14     	; 0x526 <__divsf3_pse+0x26>
 518:	9f 5f       	subi	r25, 0xFF	; 255
 51a:	5f 4f       	sbci	r21, 0xFF	; 255
 51c:	22 0f       	add	r18, r18
 51e:	33 1f       	adc	r19, r19
 520:	44 1f       	adc	r20, r20
 522:	aa 1f       	adc	r26, r26
 524:	a9 f3       	breq	.-22     	; 0x510 <__divsf3_pse+0x10>
 526:	33 d0       	rcall	.+102    	; 0x58e <__divsf3_pse+0x8e>
 528:	0e 2e       	mov	r0, r30
 52a:	3a f0       	brmi	.+14     	; 0x53a <__divsf3_pse+0x3a>
 52c:	e0 e8       	ldi	r30, 0x80	; 128
 52e:	30 d0       	rcall	.+96     	; 0x590 <__divsf3_pse+0x90>
 530:	91 50       	subi	r25, 0x01	; 1
 532:	50 40       	sbci	r21, 0x00	; 0
 534:	e6 95       	lsr	r30
 536:	00 1c       	adc	r0, r0
 538:	ca f7       	brpl	.-14     	; 0x52c <__divsf3_pse+0x2c>
 53a:	29 d0       	rcall	.+82     	; 0x58e <__divsf3_pse+0x8e>
 53c:	fe 2f       	mov	r31, r30
 53e:	27 d0       	rcall	.+78     	; 0x58e <__divsf3_pse+0x8e>
 540:	66 0f       	add	r22, r22
 542:	77 1f       	adc	r23, r23
 544:	88 1f       	adc	r24, r24
 546:	bb 1f       	adc	r27, r27
 548:	26 17       	cp	r18, r22
 54a:	37 07       	cpc	r19, r23
 54c:	48 07       	cpc	r20, r24
 54e:	ab 07       	cpc	r26, r27
 550:	b0 e8       	ldi	r27, 0x80	; 128
 552:	09 f0       	breq	.+2      	; 0x556 <__divsf3_pse+0x56>
 554:	bb 0b       	sbc	r27, r27
 556:	80 2d       	mov	r24, r0
 558:	bf 01       	movw	r22, r30
 55a:	ff 27       	eor	r31, r31
 55c:	93 58       	subi	r25, 0x83	; 131
 55e:	5f 4f       	sbci	r21, 0xFF	; 255
 560:	2a f0       	brmi	.+10     	; 0x56c <__divsf3_pse+0x6c>
 562:	9e 3f       	cpi	r25, 0xFE	; 254
 564:	51 05       	cpc	r21, r1
 566:	68 f0       	brcs	.+26     	; 0x582 <__divsf3_pse+0x82>
 568:	92 c0       	rjmp	.+292    	; 0x68e <__fp_inf>
 56a:	dc c0       	rjmp	.+440    	; 0x724 <__fp_szero>
 56c:	5f 3f       	cpi	r21, 0xFF	; 255
 56e:	ec f3       	brlt	.-6      	; 0x56a <__divsf3_pse+0x6a>
 570:	98 3e       	cpi	r25, 0xE8	; 232
 572:	dc f3       	brlt	.-10     	; 0x56a <__divsf3_pse+0x6a>
 574:	86 95       	lsr	r24
 576:	77 95       	ror	r23
 578:	67 95       	ror	r22
 57a:	b7 95       	ror	r27
 57c:	f7 95       	ror	r31
 57e:	9f 5f       	subi	r25, 0xFF	; 255
 580:	c9 f7       	brne	.-14     	; 0x574 <__divsf3_pse+0x74>
 582:	88 0f       	add	r24, r24
 584:	91 1d       	adc	r25, r1
 586:	96 95       	lsr	r25
 588:	87 95       	ror	r24
 58a:	97 f9       	bld	r25, 7
 58c:	08 95       	ret
 58e:	e1 e0       	ldi	r30, 0x01	; 1
 590:	66 0f       	add	r22, r22
 592:	77 1f       	adc	r23, r23
 594:	88 1f       	adc	r24, r24
 596:	bb 1f       	adc	r27, r27
 598:	62 17       	cp	r22, r18
 59a:	73 07       	cpc	r23, r19
 59c:	84 07       	cpc	r24, r20
 59e:	ba 07       	cpc	r27, r26
 5a0:	20 f0       	brcs	.+8      	; 0x5aa <__divsf3_pse+0xaa>
 5a2:	62 1b       	sub	r22, r18
 5a4:	73 0b       	sbc	r23, r19
 5a6:	84 0b       	sbc	r24, r20
 5a8:	ba 0b       	sbc	r27, r26
 5aa:	ee 1f       	adc	r30, r30
 5ac:	88 f7       	brcc	.-30     	; 0x590 <__divsf3_pse+0x90>
 5ae:	e0 95       	com	r30
 5b0:	08 95       	ret

000005b2 <__fixsfsi>:
 5b2:	04 d0       	rcall	.+8      	; 0x5bc <__fixunssfsi>
 5b4:	68 94       	set
 5b6:	b1 11       	cpse	r27, r1
 5b8:	b5 c0       	rjmp	.+362    	; 0x724 <__fp_szero>
 5ba:	08 95       	ret

000005bc <__fixunssfsi>:
 5bc:	98 d0       	rcall	.+304    	; 0x6ee <__fp_splitA>
 5be:	88 f0       	brcs	.+34     	; 0x5e2 <__fixunssfsi+0x26>
 5c0:	9f 57       	subi	r25, 0x7F	; 127
 5c2:	90 f0       	brcs	.+36     	; 0x5e8 <__fixunssfsi+0x2c>
 5c4:	b9 2f       	mov	r27, r25
 5c6:	99 27       	eor	r25, r25
 5c8:	b7 51       	subi	r27, 0x17	; 23
 5ca:	a0 f0       	brcs	.+40     	; 0x5f4 <__fixunssfsi+0x38>
 5cc:	d1 f0       	breq	.+52     	; 0x602 <__fixunssfsi+0x46>
 5ce:	66 0f       	add	r22, r22
 5d0:	77 1f       	adc	r23, r23
 5d2:	88 1f       	adc	r24, r24
 5d4:	99 1f       	adc	r25, r25
 5d6:	1a f0       	brmi	.+6      	; 0x5de <__fixunssfsi+0x22>
 5d8:	ba 95       	dec	r27
 5da:	c9 f7       	brne	.-14     	; 0x5ce <__fixunssfsi+0x12>
 5dc:	12 c0       	rjmp	.+36     	; 0x602 <__fixunssfsi+0x46>
 5de:	b1 30       	cpi	r27, 0x01	; 1
 5e0:	81 f0       	breq	.+32     	; 0x602 <__fixunssfsi+0x46>
 5e2:	9f d0       	rcall	.+318    	; 0x722 <__fp_zero>
 5e4:	b1 e0       	ldi	r27, 0x01	; 1
 5e6:	08 95       	ret
 5e8:	9c c0       	rjmp	.+312    	; 0x722 <__fp_zero>
 5ea:	67 2f       	mov	r22, r23
 5ec:	78 2f       	mov	r23, r24
 5ee:	88 27       	eor	r24, r24
 5f0:	b8 5f       	subi	r27, 0xF8	; 248
 5f2:	39 f0       	breq	.+14     	; 0x602 <__fixunssfsi+0x46>
 5f4:	b9 3f       	cpi	r27, 0xF9	; 249
 5f6:	cc f3       	brlt	.-14     	; 0x5ea <__fixunssfsi+0x2e>
 5f8:	86 95       	lsr	r24
 5fa:	77 95       	ror	r23
 5fc:	67 95       	ror	r22
 5fe:	b3 95       	inc	r27
 600:	d9 f7       	brne	.-10     	; 0x5f8 <__fixunssfsi+0x3c>
 602:	3e f4       	brtc	.+14     	; 0x612 <__fixunssfsi+0x56>
 604:	90 95       	com	r25
 606:	80 95       	com	r24
 608:	70 95       	com	r23
 60a:	61 95       	neg	r22
 60c:	7f 4f       	sbci	r23, 0xFF	; 255
 60e:	8f 4f       	sbci	r24, 0xFF	; 255
 610:	9f 4f       	sbci	r25, 0xFF	; 255
 612:	08 95       	ret

00000614 <__floatunsisf>:
 614:	e8 94       	clt
 616:	09 c0       	rjmp	.+18     	; 0x62a <__floatsisf+0x12>

00000618 <__floatsisf>:
 618:	97 fb       	bst	r25, 7
 61a:	3e f4       	brtc	.+14     	; 0x62a <__floatsisf+0x12>
 61c:	90 95       	com	r25
 61e:	80 95       	com	r24
 620:	70 95       	com	r23
 622:	61 95       	neg	r22
 624:	7f 4f       	sbci	r23, 0xFF	; 255
 626:	8f 4f       	sbci	r24, 0xFF	; 255
 628:	9f 4f       	sbci	r25, 0xFF	; 255
 62a:	99 23       	and	r25, r25
 62c:	a9 f0       	breq	.+42     	; 0x658 <__floatsisf+0x40>
 62e:	f9 2f       	mov	r31, r25
 630:	96 e9       	ldi	r25, 0x96	; 150
 632:	bb 27       	eor	r27, r27
 634:	93 95       	inc	r25
 636:	f6 95       	lsr	r31
 638:	87 95       	ror	r24
 63a:	77 95       	ror	r23
 63c:	67 95       	ror	r22
 63e:	b7 95       	ror	r27
 640:	f1 11       	cpse	r31, r1
 642:	f8 cf       	rjmp	.-16     	; 0x634 <__floatsisf+0x1c>
 644:	fa f4       	brpl	.+62     	; 0x684 <__floatsisf+0x6c>
 646:	bb 0f       	add	r27, r27
 648:	11 f4       	brne	.+4      	; 0x64e <__floatsisf+0x36>
 64a:	60 ff       	sbrs	r22, 0
 64c:	1b c0       	rjmp	.+54     	; 0x684 <__floatsisf+0x6c>
 64e:	6f 5f       	subi	r22, 0xFF	; 255
 650:	7f 4f       	sbci	r23, 0xFF	; 255
 652:	8f 4f       	sbci	r24, 0xFF	; 255
 654:	9f 4f       	sbci	r25, 0xFF	; 255
 656:	16 c0       	rjmp	.+44     	; 0x684 <__floatsisf+0x6c>
 658:	88 23       	and	r24, r24
 65a:	11 f0       	breq	.+4      	; 0x660 <__floatsisf+0x48>
 65c:	96 e9       	ldi	r25, 0x96	; 150
 65e:	11 c0       	rjmp	.+34     	; 0x682 <__floatsisf+0x6a>
 660:	77 23       	and	r23, r23
 662:	21 f0       	breq	.+8      	; 0x66c <__floatsisf+0x54>
 664:	9e e8       	ldi	r25, 0x8E	; 142
 666:	87 2f       	mov	r24, r23
 668:	76 2f       	mov	r23, r22
 66a:	05 c0       	rjmp	.+10     	; 0x676 <__floatsisf+0x5e>
 66c:	66 23       	and	r22, r22
 66e:	71 f0       	breq	.+28     	; 0x68c <__floatsisf+0x74>
 670:	96 e8       	ldi	r25, 0x86	; 134
 672:	86 2f       	mov	r24, r22
 674:	70 e0       	ldi	r23, 0x00	; 0
 676:	60 e0       	ldi	r22, 0x00	; 0
 678:	2a f0       	brmi	.+10     	; 0x684 <__floatsisf+0x6c>
 67a:	9a 95       	dec	r25
 67c:	66 0f       	add	r22, r22
 67e:	77 1f       	adc	r23, r23
 680:	88 1f       	adc	r24, r24
 682:	da f7       	brpl	.-10     	; 0x67a <__floatsisf+0x62>
 684:	88 0f       	add	r24, r24
 686:	96 95       	lsr	r25
 688:	87 95       	ror	r24
 68a:	97 f9       	bld	r25, 7
 68c:	08 95       	ret

0000068e <__fp_inf>:
 68e:	97 f9       	bld	r25, 7
 690:	9f 67       	ori	r25, 0x7F	; 127
 692:	80 e8       	ldi	r24, 0x80	; 128
 694:	70 e0       	ldi	r23, 0x00	; 0
 696:	60 e0       	ldi	r22, 0x00	; 0
 698:	08 95       	ret

0000069a <__fp_nan>:
 69a:	9f ef       	ldi	r25, 0xFF	; 255
 69c:	80 ec       	ldi	r24, 0xC0	; 192
 69e:	08 95       	ret

000006a0 <__fp_pscA>:
 6a0:	00 24       	eor	r0, r0
 6a2:	0a 94       	dec	r0
 6a4:	16 16       	cp	r1, r22
 6a6:	17 06       	cpc	r1, r23
 6a8:	18 06       	cpc	r1, r24
 6aa:	09 06       	cpc	r0, r25
 6ac:	08 95       	ret

000006ae <__fp_pscB>:
 6ae:	00 24       	eor	r0, r0
 6b0:	0a 94       	dec	r0
 6b2:	12 16       	cp	r1, r18
 6b4:	13 06       	cpc	r1, r19
 6b6:	14 06       	cpc	r1, r20
 6b8:	05 06       	cpc	r0, r21
 6ba:	08 95       	ret

000006bc <__fp_round>:
 6bc:	09 2e       	mov	r0, r25
 6be:	03 94       	inc	r0
 6c0:	00 0c       	add	r0, r0
 6c2:	11 f4       	brne	.+4      	; 0x6c8 <__fp_round+0xc>
 6c4:	88 23       	and	r24, r24
 6c6:	52 f0       	brmi	.+20     	; 0x6dc <__fp_round+0x20>
 6c8:	bb 0f       	add	r27, r27
 6ca:	40 f4       	brcc	.+16     	; 0x6dc <__fp_round+0x20>
 6cc:	bf 2b       	or	r27, r31
 6ce:	11 f4       	brne	.+4      	; 0x6d4 <__fp_round+0x18>
 6d0:	60 ff       	sbrs	r22, 0
 6d2:	04 c0       	rjmp	.+8      	; 0x6dc <__fp_round+0x20>
 6d4:	6f 5f       	subi	r22, 0xFF	; 255
 6d6:	7f 4f       	sbci	r23, 0xFF	; 255
 6d8:	8f 4f       	sbci	r24, 0xFF	; 255
 6da:	9f 4f       	sbci	r25, 0xFF	; 255
 6dc:	08 95       	ret

000006de <__fp_split3>:
 6de:	57 fd       	sbrc	r21, 7
 6e0:	90 58       	subi	r25, 0x80	; 128
 6e2:	44 0f       	add	r20, r20
 6e4:	55 1f       	adc	r21, r21
 6e6:	59 f0       	breq	.+22     	; 0x6fe <__fp_splitA+0x10>
 6e8:	5f 3f       	cpi	r21, 0xFF	; 255
 6ea:	71 f0       	breq	.+28     	; 0x708 <__fp_splitA+0x1a>
 6ec:	47 95       	ror	r20

000006ee <__fp_splitA>:
 6ee:	88 0f       	add	r24, r24
 6f0:	97 fb       	bst	r25, 7
 6f2:	99 1f       	adc	r25, r25
 6f4:	61 f0       	breq	.+24     	; 0x70e <__fp_splitA+0x20>
 6f6:	9f 3f       	cpi	r25, 0xFF	; 255
 6f8:	79 f0       	breq	.+30     	; 0x718 <__fp_splitA+0x2a>
 6fa:	87 95       	ror	r24
 6fc:	08 95       	ret
 6fe:	12 16       	cp	r1, r18
 700:	13 06       	cpc	r1, r19
 702:	14 06       	cpc	r1, r20
 704:	55 1f       	adc	r21, r21
 706:	f2 cf       	rjmp	.-28     	; 0x6ec <__fp_split3+0xe>
 708:	46 95       	lsr	r20
 70a:	f1 df       	rcall	.-30     	; 0x6ee <__fp_splitA>
 70c:	08 c0       	rjmp	.+16     	; 0x71e <__fp_splitA+0x30>
 70e:	16 16       	cp	r1, r22
 710:	17 06       	cpc	r1, r23
 712:	18 06       	cpc	r1, r24
 714:	99 1f       	adc	r25, r25
 716:	f1 cf       	rjmp	.-30     	; 0x6fa <__fp_splitA+0xc>
 718:	86 95       	lsr	r24
 71a:	71 05       	cpc	r23, r1
 71c:	61 05       	cpc	r22, r1
 71e:	08 94       	sec
 720:	08 95       	ret

00000722 <__fp_zero>:
 722:	e8 94       	clt

00000724 <__fp_szero>:
 724:	bb 27       	eor	r27, r27
 726:	66 27       	eor	r22, r22
 728:	77 27       	eor	r23, r23
 72a:	cb 01       	movw	r24, r22
 72c:	97 f9       	bld	r25, 7
 72e:	08 95       	ret

00000730 <__mulsf3>:
 730:	0b d0       	rcall	.+22     	; 0x748 <__mulsf3x>
 732:	c4 cf       	rjmp	.-120    	; 0x6bc <__fp_round>
 734:	b5 df       	rcall	.-150    	; 0x6a0 <__fp_pscA>
 736:	28 f0       	brcs	.+10     	; 0x742 <__mulsf3+0x12>
 738:	ba df       	rcall	.-140    	; 0x6ae <__fp_pscB>
 73a:	18 f0       	brcs	.+6      	; 0x742 <__mulsf3+0x12>
 73c:	95 23       	and	r25, r21
 73e:	09 f0       	breq	.+2      	; 0x742 <__mulsf3+0x12>
 740:	a6 cf       	rjmp	.-180    	; 0x68e <__fp_inf>
 742:	ab cf       	rjmp	.-170    	; 0x69a <__fp_nan>
 744:	11 24       	eor	r1, r1
 746:	ee cf       	rjmp	.-36     	; 0x724 <__fp_szero>

00000748 <__mulsf3x>:
 748:	ca df       	rcall	.-108    	; 0x6de <__fp_split3>
 74a:	a0 f3       	brcs	.-24     	; 0x734 <__mulsf3+0x4>

0000074c <__mulsf3_pse>:
 74c:	95 9f       	mul	r25, r21
 74e:	d1 f3       	breq	.-12     	; 0x744 <__mulsf3+0x14>
 750:	95 0f       	add	r25, r21
 752:	50 e0       	ldi	r21, 0x00	; 0
 754:	55 1f       	adc	r21, r21
 756:	62 9f       	mul	r22, r18
 758:	f0 01       	movw	r30, r0
 75a:	72 9f       	mul	r23, r18
 75c:	bb 27       	eor	r27, r27
 75e:	f0 0d       	add	r31, r0
 760:	b1 1d       	adc	r27, r1
 762:	63 9f       	mul	r22, r19
 764:	aa 27       	eor	r26, r26
 766:	f0 0d       	add	r31, r0
 768:	b1 1d       	adc	r27, r1
 76a:	aa 1f       	adc	r26, r26
 76c:	64 9f       	mul	r22, r20
 76e:	66 27       	eor	r22, r22
 770:	b0 0d       	add	r27, r0
 772:	a1 1d       	adc	r26, r1
 774:	66 1f       	adc	r22, r22
 776:	82 9f       	mul	r24, r18
 778:	22 27       	eor	r18, r18
 77a:	b0 0d       	add	r27, r0
 77c:	a1 1d       	adc	r26, r1
 77e:	62 1f       	adc	r22, r18
 780:	73 9f       	mul	r23, r19
 782:	b0 0d       	add	r27, r0
 784:	a1 1d       	adc	r26, r1
 786:	62 1f       	adc	r22, r18
 788:	83 9f       	mul	r24, r19
 78a:	a0 0d       	add	r26, r0
 78c:	61 1d       	adc	r22, r1
 78e:	22 1f       	adc	r18, r18
 790:	74 9f       	mul	r23, r20
 792:	33 27       	eor	r19, r19
 794:	a0 0d       	add	r26, r0
 796:	61 1d       	adc	r22, r1
 798:	23 1f       	adc	r18, r19
 79a:	84 9f       	mul	r24, r20
 79c:	60 0d       	add	r22, r0
 79e:	21 1d       	adc	r18, r1
 7a0:	82 2f       	mov	r24, r18
 7a2:	76 2f       	mov	r23, r22
 7a4:	6a 2f       	mov	r22, r26
 7a6:	11 24       	eor	r1, r1
 7a8:	9f 57       	subi	r25, 0x7F	; 127
 7aa:	50 40       	sbci	r21, 0x00	; 0
 7ac:	8a f0       	brmi	.+34     	; 0x7d0 <__mulsf3_pse+0x84>
 7ae:	e1 f0       	breq	.+56     	; 0x7e8 <__mulsf3_pse+0x9c>
 7b0:	88 23       	and	r24, r24
 7b2:	4a f0       	brmi	.+18     	; 0x7c6 <__mulsf3_pse+0x7a>
 7b4:	ee 0f       	add	r30, r30
 7b6:	ff 1f       	adc	r31, r31
 7b8:	bb 1f       	adc	r27, r27
 7ba:	66 1f       	adc	r22, r22
 7bc:	77 1f       	adc	r23, r23
 7be:	88 1f       	adc	r24, r24
 7c0:	91 50       	subi	r25, 0x01	; 1
 7c2:	50 40       	sbci	r21, 0x00	; 0
 7c4:	a9 f7       	brne	.-22     	; 0x7b0 <__mulsf3_pse+0x64>
 7c6:	9e 3f       	cpi	r25, 0xFE	; 254
 7c8:	51 05       	cpc	r21, r1
 7ca:	70 f0       	brcs	.+28     	; 0x7e8 <__mulsf3_pse+0x9c>
 7cc:	60 cf       	rjmp	.-320    	; 0x68e <__fp_inf>
 7ce:	aa cf       	rjmp	.-172    	; 0x724 <__fp_szero>
 7d0:	5f 3f       	cpi	r21, 0xFF	; 255
 7d2:	ec f3       	brlt	.-6      	; 0x7ce <__mulsf3_pse+0x82>
 7d4:	98 3e       	cpi	r25, 0xE8	; 232
 7d6:	dc f3       	brlt	.-10     	; 0x7ce <__mulsf3_pse+0x82>
 7d8:	86 95       	lsr	r24
 7da:	77 95       	ror	r23
 7dc:	67 95       	ror	r22
 7de:	b7 95       	ror	r27
 7e0:	f7 95       	ror	r31
 7e2:	e7 95       	ror	r30
 7e4:	9f 5f       	subi	r25, 0xFF	; 255
 7e6:	c1 f7       	brne	.-16     	; 0x7d8 <__mulsf3_pse+0x8c>
 7e8:	fe 2b       	or	r31, r30
 7ea:	88 0f       	add	r24, r24
 7ec:	91 1d       	adc	r25, r1
 7ee:	96 95       	lsr	r25
 7f0:	87 95       	ror	r24
 7f2:	97 f9       	bld	r25, 7
 7f4:	08 95       	ret

000007f6 <do_rand>:
 7f6:	8f 92       	push	r8
 7f8:	9f 92       	push	r9
 7fa:	af 92       	push	r10
 7fc:	bf 92       	push	r11
 7fe:	cf 92       	push	r12
 800:	df 92       	push	r13
 802:	ef 92       	push	r14
 804:	ff 92       	push	r15
 806:	cf 93       	push	r28
 808:	df 93       	push	r29
 80a:	ec 01       	movw	r28, r24
 80c:	68 81       	ld	r22, Y
 80e:	79 81       	ldd	r23, Y+1	; 0x01
 810:	8a 81       	ldd	r24, Y+2	; 0x02
 812:	9b 81       	ldd	r25, Y+3	; 0x03
 814:	61 15       	cp	r22, r1
 816:	71 05       	cpc	r23, r1
 818:	81 05       	cpc	r24, r1
 81a:	91 05       	cpc	r25, r1
 81c:	21 f4       	brne	.+8      	; 0x826 <do_rand+0x30>
 81e:	64 e2       	ldi	r22, 0x24	; 36
 820:	79 ed       	ldi	r23, 0xD9	; 217
 822:	8b e5       	ldi	r24, 0x5B	; 91
 824:	97 e0       	ldi	r25, 0x07	; 7
 826:	2d e1       	ldi	r18, 0x1D	; 29
 828:	33 ef       	ldi	r19, 0xF3	; 243
 82a:	41 e0       	ldi	r20, 0x01	; 1
 82c:	50 e0       	ldi	r21, 0x00	; 0
 82e:	38 d0       	rcall	.+112    	; 0x8a0 <__divmodsi4>
 830:	49 01       	movw	r8, r18
 832:	5a 01       	movw	r10, r20
 834:	9b 01       	movw	r18, r22
 836:	ac 01       	movw	r20, r24
 838:	a7 ea       	ldi	r26, 0xA7	; 167
 83a:	b1 e4       	ldi	r27, 0x41	; 65
 83c:	4d d0       	rcall	.+154    	; 0x8d8 <__muluhisi3>
 83e:	6b 01       	movw	r12, r22
 840:	7c 01       	movw	r14, r24
 842:	ac ee       	ldi	r26, 0xEC	; 236
 844:	b4 ef       	ldi	r27, 0xF4	; 244
 846:	a5 01       	movw	r20, r10
 848:	94 01       	movw	r18, r8
 84a:	52 d0       	rcall	.+164    	; 0x8f0 <__mulohisi3>
 84c:	dc 01       	movw	r26, r24
 84e:	cb 01       	movw	r24, r22
 850:	8c 0d       	add	r24, r12
 852:	9d 1d       	adc	r25, r13
 854:	ae 1d       	adc	r26, r14
 856:	bf 1d       	adc	r27, r15
 858:	b7 ff       	sbrs	r27, 7
 85a:	03 c0       	rjmp	.+6      	; 0x862 <do_rand+0x6c>
 85c:	01 97       	sbiw	r24, 0x01	; 1
 85e:	a1 09       	sbc	r26, r1
 860:	b0 48       	sbci	r27, 0x80	; 128
 862:	88 83       	st	Y, r24
 864:	99 83       	std	Y+1, r25	; 0x01
 866:	aa 83       	std	Y+2, r26	; 0x02
 868:	bb 83       	std	Y+3, r27	; 0x03
 86a:	9f 77       	andi	r25, 0x7F	; 127
 86c:	df 91       	pop	r29
 86e:	cf 91       	pop	r28
 870:	ff 90       	pop	r15
 872:	ef 90       	pop	r14
 874:	df 90       	pop	r13
 876:	cf 90       	pop	r12
 878:	bf 90       	pop	r11
 87a:	af 90       	pop	r10
 87c:	9f 90       	pop	r9
 87e:	8f 90       	pop	r8
 880:	08 95       	ret

00000882 <rand_r>:
 882:	b9 cf       	rjmp	.-142    	; 0x7f6 <do_rand>

00000884 <rand>:
 884:	80 e0       	ldi	r24, 0x00	; 0
 886:	91 e0       	ldi	r25, 0x01	; 1
 888:	b6 cf       	rjmp	.-148    	; 0x7f6 <do_rand>

0000088a <srand>:
 88a:	a0 e0       	ldi	r26, 0x00	; 0
 88c:	b0 e0       	ldi	r27, 0x00	; 0
 88e:	80 93 00 01 	sts	0x0100, r24
 892:	90 93 01 01 	sts	0x0101, r25
 896:	a0 93 02 01 	sts	0x0102, r26
 89a:	b0 93 03 01 	sts	0x0103, r27
 89e:	08 95       	ret

000008a0 <__divmodsi4>:
 8a0:	05 2e       	mov	r0, r21
 8a2:	97 fb       	bst	r25, 7
 8a4:	16 f4       	brtc	.+4      	; 0x8aa <__divmodsi4+0xa>
 8a6:	00 94       	com	r0
 8a8:	0f d0       	rcall	.+30     	; 0x8c8 <__negsi2>
 8aa:	57 fd       	sbrc	r21, 7
 8ac:	05 d0       	rcall	.+10     	; 0x8b8 <__divmodsi4_neg2>
 8ae:	24 d0       	rcall	.+72     	; 0x8f8 <__udivmodsi4>
 8b0:	07 fc       	sbrc	r0, 7
 8b2:	02 d0       	rcall	.+4      	; 0x8b8 <__divmodsi4_neg2>
 8b4:	46 f4       	brtc	.+16     	; 0x8c6 <__divmodsi4_exit>
 8b6:	08 c0       	rjmp	.+16     	; 0x8c8 <__negsi2>

000008b8 <__divmodsi4_neg2>:
 8b8:	50 95       	com	r21
 8ba:	40 95       	com	r20
 8bc:	30 95       	com	r19
 8be:	21 95       	neg	r18
 8c0:	3f 4f       	sbci	r19, 0xFF	; 255
 8c2:	4f 4f       	sbci	r20, 0xFF	; 255
 8c4:	5f 4f       	sbci	r21, 0xFF	; 255

000008c6 <__divmodsi4_exit>:
 8c6:	08 95       	ret

000008c8 <__negsi2>:
 8c8:	90 95       	com	r25
 8ca:	80 95       	com	r24
 8cc:	70 95       	com	r23
 8ce:	61 95       	neg	r22
 8d0:	7f 4f       	sbci	r23, 0xFF	; 255
 8d2:	8f 4f       	sbci	r24, 0xFF	; 255
 8d4:	9f 4f       	sbci	r25, 0xFF	; 255
 8d6:	08 95       	ret

000008d8 <__muluhisi3>:
 8d8:	31 d0       	rcall	.+98     	; 0x93c <__umulhisi3>
 8da:	a5 9f       	mul	r26, r21
 8dc:	90 0d       	add	r25, r0
 8de:	b4 9f       	mul	r27, r20
 8e0:	90 0d       	add	r25, r0
 8e2:	a4 9f       	mul	r26, r20
 8e4:	80 0d       	add	r24, r0
 8e6:	91 1d       	adc	r25, r1
 8e8:	11 24       	eor	r1, r1
 8ea:	08 95       	ret

000008ec <__mulshisi3>:
 8ec:	b7 ff       	sbrs	r27, 7
 8ee:	f4 cf       	rjmp	.-24     	; 0x8d8 <__muluhisi3>

000008f0 <__mulohisi3>:
 8f0:	f3 df       	rcall	.-26     	; 0x8d8 <__muluhisi3>
 8f2:	82 1b       	sub	r24, r18
 8f4:	93 0b       	sbc	r25, r19
 8f6:	08 95       	ret

000008f8 <__udivmodsi4>:
 8f8:	a1 e2       	ldi	r26, 0x21	; 33
 8fa:	1a 2e       	mov	r1, r26
 8fc:	aa 1b       	sub	r26, r26
 8fe:	bb 1b       	sub	r27, r27
 900:	fd 01       	movw	r30, r26
 902:	0d c0       	rjmp	.+26     	; 0x91e <__udivmodsi4_ep>

00000904 <__udivmodsi4_loop>:
 904:	aa 1f       	adc	r26, r26
 906:	bb 1f       	adc	r27, r27
 908:	ee 1f       	adc	r30, r30
 90a:	ff 1f       	adc	r31, r31
 90c:	a2 17       	cp	r26, r18
 90e:	b3 07       	cpc	r27, r19
 910:	e4 07       	cpc	r30, r20
 912:	f5 07       	cpc	r31, r21
 914:	20 f0       	brcs	.+8      	; 0x91e <__udivmodsi4_ep>
 916:	a2 1b       	sub	r26, r18
 918:	b3 0b       	sbc	r27, r19
 91a:	e4 0b       	sbc	r30, r20
 91c:	f5 0b       	sbc	r31, r21

0000091e <__udivmodsi4_ep>:
 91e:	66 1f       	adc	r22, r22
 920:	77 1f       	adc	r23, r23
 922:	88 1f       	adc	r24, r24
 924:	99 1f       	adc	r25, r25
 926:	1a 94       	dec	r1
 928:	69 f7       	brne	.-38     	; 0x904 <__udivmodsi4_loop>
 92a:	60 95       	com	r22
 92c:	70 95       	com	r23
 92e:	80 95       	com	r24
 930:	90 95       	com	r25
 932:	9b 01       	movw	r18, r22
 934:	ac 01       	movw	r20, r24
 936:	bd 01       	movw	r22, r26
 938:	cf 01       	movw	r24, r30
 93a:	08 95       	ret

0000093c <__umulhisi3>:
 93c:	a2 9f       	mul	r26, r18
 93e:	b0 01       	movw	r22, r0
 940:	b3 9f       	mul	r27, r19
 942:	c0 01       	movw	r24, r0
 944:	a3 9f       	mul	r26, r19
 946:	70 0d       	add	r23, r0
 948:	81 1d       	adc	r24, r1
 94a:	11 24       	eor	r1, r1
 94c:	91 1d       	adc	r25, r1
 94e:	b2 9f       	mul	r27, r18
 950:	70 0d       	add	r23, r0
 952:	81 1d       	adc	r24, r1
 954:	11 24       	eor	r1, r1
 956:	91 1d       	adc	r25, r1
 958:	08 95       	ret

0000095a <_exit>:
 95a:	f8 94       	cli

0000095c <__stop_program>:
 95c:	ff cf       	rjmp	.-2      	; 0x95c <__stop_program>
